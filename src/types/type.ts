import { Gender, UserRole } from "./enums";

// // Type for a medical record
// export interface MedicalRecord {
//   recordId: string;
//   diagnosis: string;
//   treatment: string;
//   medications: string[];
//   doctorId: string;
//   date: string; // ISO 8601 format
// }

// // Type for insurance information
// export interface InsuranceInfo {
//   provider: string;
//   policyNumber: string;
//   coverageDetails: string;
//   expirationDate: string; // ISO 8601 format
// }

// // Type for consent details
// export interface Consent {
//   grantedTo: string; // Wallet address or institution ID
//   types: ConsentType[];
//   expirationDate: string; // ISO 8601 format
// }

// // Type for blockchain transaction metadata
// export interface BlockchainTransaction {
//   transactionHash: string;
//   blockNumber: number;
//   timestamp: string; // ISO 8601 format
//   event: string;
//   data: Record<string, unknown>;
// }

// // Type for patient information
// export interface Patient {
//   patientId: string;
//   name: string;
//   dateOfBirth: string; // ISO 8601 format
//   gender: Gender;
//   address: string; // Wallet address
//   medicalRecords: MedicalRecord[];
//   insuranceInfo?: InsuranceInfo;
//   consents: Consent[];
//   transactions: BlockchainTransaction[];
// }

// // Type for the entire healthcare system
// export interface HealthcareSystem {
//   patients: Patient[];
// }

export type User = {
  address: string; // Blockchain address (public key)
  role: UserRole; // Doctor or Patient
  name: string; // Full name
  specialization?: string; // For doctors only
  patientId?: string; // For patients only
};

export type Doctor = {
  id?: string; // Auto-generated by Firestore or custom
  address: string; // Blockchain address
  name: string; // Doctor's name
  specialization: string; // Medical specialty
  createdAt: Date; // Timestamp when added
  role: UserRole; // Always "Doctor"
};

export interface MedicalRecord {
  recordId: string;
  description: string;
  createdAt: Date;
}

export interface Consent {
  doctorId: string;
  grantedAt: Date;
}

export interface Transaction {
  txHash: string;
  amount: string;
  timestamp: Date;
}

export interface Patient {
  id: string; // Firestore document ID
  patientId: string; // Unique patient identifier
  name: string;
  age: number;
  dateOfBirth: string;
  gender: Gender;
  address: string;
  medicalHistory: string[];
  medicalRecords: MedicalRecord[];
  consents: Consent[];
  transactions: Transaction[];
  blockchainAddress: string;
  createdAt: Date;
}
